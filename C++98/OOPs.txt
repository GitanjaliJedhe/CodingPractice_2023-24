building blocks of OOPs:
1. Class
2. Objects
3. Encapsulation
4. Abstraction
5. Polymorphism
6. Inheritance


Class:
user-defined data type
holds its own data members and member functions
accessed and used by creating an instance of that class
class is like a blueprint for an object

Object
Object is an instance of a Class
class is defined, no memory is allocated but when it is instantiated (i.e. an object is created) memory is allocated.

Encapsulation
binding together the data and the functions that manipulate them
Encapsulation also leads to data abstraction or data hiding. 

Abstraction
Abstraction means displaying only essential information and hiding the implementation details.
(1)Abstraction using Classes:  class helps us to group data members and member functions using available access specifiers. 
A Class can decide which data member will be visible to the outside world and which is not.
(2)Abstraction in Header files:
we simply call the function pow() present in the math.h header file and pass the numbers as arguments 
without knowing the underlying algorithm according to which the function is actually calculating the power of numbers.

Polymorphism
polymorphism means having many forms.
Operator Overloading:  process of making an operator exhibit different behaviors in different instances
Function Overloading:  Function overloading is using a single function name to perform different types of tasks

Dynamic Binding
In dynamic binding, the code to be executed in response to the function call is decided at runtime. 
C++ has virtual functions to support this.

Inheritance
Inheritance supports the concept of “reusability”, i.e. when we want to create a new class and there is already a class that includes some of the code that we want, 
we can derive our new class from the existing class. 